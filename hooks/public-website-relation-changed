#!/usr/bin/env python
from charmhelpers.core import hookenv
import datetime
import json
import os
import sys

sys.path.append(os.path.abspath(os.path.join(os.environ['CHARM_DIR'],
                'contrib')))

from common import serialize_data, unserialize_data

hooks = hookenv.Hooks()

@hooks.hook('public-website-relation-changed')
def website_changed():
    relid = hookenv.relation_id()

    if not hookenv.relation_get('public-address'):
        log("Relationship incomplete, missing public-address. Exiting")
        return

    serialize_proxy_data()
    domain = hookenv.config('domain')
    hookenv.relation_set(relid, {'domain': domain})


def serialize_proxy_data():
    # grab an object of the relationship
    reldata = hookenv.relation_for_unit()
    # no slashes in our names
    unitkey = reldata['__unit__'].replace('/', '-')

    # build the config object for cache
    proxy_data = {'public-address': hookenv.relation_get('public-address'),
                  'port': hookenv.relation_get('port')}

    proxy_hosts = unserialize_data('data/proxy-hosts.json')
    proxy_hosts[unitkey] = proxy_data
    serialize_data('data/proxy-hosts.json', proxy_hosts)

    consul_relations = hookenv.relations_of_type('consul')
    import ipdb; ipdb.set_trace()
    if len(consul_relations) > 0:
        print "Discovered consul-relationship, actioning"
        # send a timestamp to trigger the relationship cycle
        cycle_stamp = datetime.datetime.strftime(datetime.datetime.now(),
                                                 format="%m%y%d%h%m%s")
        hookenv.relation_set(consul_relations[0]['__relid__'],
                             {'website-joined-stamp': cycle_stamp})

if __name__ == '__main__':
    hooks.execute(sys.argv)
