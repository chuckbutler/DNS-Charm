#!/usr/bin/python
import os
import subprocess
import sys


# Add charmhelpers to the system path.
try:
    sys.path.insert(0, os.path.abspath(os.path.join(os.environ['CHARM_DIR'],
                                                    'lib')))
    sys.path.insert(0, os.path.abspath(os.path.join(os.environ['CHARM_DIR'],
                                                    'contrib')))
except:
    sys.path.insert(0, os.path.abspath(os.path.join('..', 'lib')))
    sys.path.insert(0, os.path.abspath(os.path.join('..', 'contrib')))

from charmhelpers.core.hookenv import (
    log,
    config,
)
from charmhelpers.fetch import (
    apt_install,
    apt_update,
)


class Install(object):

    # Does not assume offline environment by default
    def install_core(self):
        if not self.sanity_check():
            return 0

        # TODO: Check offline, install fatpack
        apt_update(fatal=True)
        apt_install(packages=[
            'python-pip',
            'make',
            ], fatal=True)

        subprocess.call(['pip', 'install', '-r', 'requirements.txt',
                         '--upgrade'])

    def sanity_check(self):
        if not config()['domain']:
            log("No Canonical Domain specified - Aborting until configured")
            # It's reasonable to assume we're not doing anything useful at this
            # point, as we are unconfigured. Abort doing *anything*
            return False
        return True

    # Place the offline environment as a config option
    # Place the files in data/ and the provider/charm will look to isntall this
    # information from there.


if __name__ == '__main__':
    i = Install()
    i.install_core()
